openapi: 3.1.0
info:
  title: DIP-easy API
  version: 1.0.0
  description: API documentation for DIP-easy application

servers:
  - url: http://localhost:8000
    description: Development server

paths:
  /api/auth/login:
    options:
      summary: CORS preflight for login
      tags:
        - CORS
      responses:
        "204":
          description: CORS headers sent successfully
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: "*"
            Access-Control-Allow-Methods:
              schema:
                type: string
                example: "POST, OPTIONS"
            Access-Control-Allow-Headers:
              schema:
                type: string
                example: "Content-Type, Authorization"
    post:
      summary: User login
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
      responses:
        "200":
          description: Successful login
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: "*"
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                      email:
                        type: string
        "401":
          description: Invalid credentials
        "500":
          description: Server error

  /api/auth/register:
    options:
      summary: CORS preflight for registration
      tags:
        - CORS
      responses:
        "204":
          description: CORS headers sent successfully
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: "*"
            Access-Control-Allow-Methods:
              schema:
                type: string
                example: "POST, OPTIONS"
            Access-Control-Allow-Headers:
              schema:
                type: string
                example: "Content-Type, Authorization"
    post:
      summary: User registration
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - name
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
                name:
                  type: string
      responses:
        "201":
          description: User created successfully
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: "*"
        "400":
          description: Invalid input
        "409":
          description: User already exists
        "500":
          description: Server error

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
