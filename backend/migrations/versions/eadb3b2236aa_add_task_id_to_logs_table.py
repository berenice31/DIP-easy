"""add task_id to logs table

Revision ID: eadb3b2236aa
Revises: 679787580a17
Create Date: 2025-05-15 12:06:11.776168

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'eadb3b2236aa'
down_revision: Union[str, None] = '679787580a17'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('compatibility_tests', sa.Column('test_type', sa.String(), nullable=False))
    op.add_column('compatibility_tests', sa.Column('test_date', sa.DateTime(timezone=True), nullable=False))
    op.add_column('compatibility_tests', sa.Column('result', sa.String(), nullable=False))
    op.add_column('compatibility_tests', sa.Column('notes', sa.String(), nullable=True))
    op.add_column('compatibility_tests', sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False))
    op.drop_column('compatibility_tests', 'comp_temp')
    op.drop_column('compatibility_tests', 'comp_duree')
    op.add_column('generations', sa.Column('result', sa.String(), nullable=True))
    op.add_column('generations', sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False))
    op.add_column('generations', sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False))
    op.drop_constraint('generations_template_id_fkey', 'generations', type_='foreignkey')
    op.create_foreign_key('fk_generations_template', 'generations', 'templates', ['template_id'], ['id'], ondelete='CASCADE')
    op.add_column('logs', sa.Column('task_id', sa.UUID(), nullable=True))
    op.create_foreign_key('fk_logs_task', 'logs', 'tasks', ['task_id'], ['id'], ondelete='CASCADE')
    op.add_column('settings', sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False))
    op.add_column('settings', sa.Column('description', sa.String(), nullable=True))
    op.add_column('settings', sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False))
    op.alter_column('settings', 'value',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               type_=sa.String(),
               existing_nullable=False)
    op.create_unique_constraint('uq_settings_key', 'settings', ['key'])
    op.add_column('stability_tests', sa.Column('test_type', sa.String(), nullable=False))
    op.add_column('stability_tests', sa.Column('test_date', sa.DateTime(timezone=True), nullable=False))
    op.add_column('stability_tests', sa.Column('result', sa.String(), nullable=False))
    op.add_column('stability_tests', sa.Column('notes', sa.String(), nullable=True))
    op.add_column('stability_tests', sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False))
    op.drop_column('stability_tests', 'stab_duree')
    op.drop_column('stability_tests', 'stab_observation')
    op.drop_column('stability_tests', 'stab_temperature')
    op.add_column('tasks', sa.Column('generation_id', sa.UUID(), nullable=False))
    op.add_column('tasks', sa.Column('task_type', sa.String(), nullable=False))
    op.add_column('tasks', sa.Column('status', sa.String(), nullable=False))
    op.add_column('tasks', sa.Column('result', sa.String(), nullable=True))
    op.create_foreign_key('fk_tasks_generation', 'tasks', 'generations', ['generation_id'], ['id'], ondelete='CASCADE')
    op.drop_column('tasks', 'schedule')
    op.drop_column('tasks', 'prompt')
    op.drop_column('tasks', 'next_run')
    op.drop_column('tasks', 'last_run')
    op.drop_column('tasks', 'is_enabled')
    op.drop_column('tasks', 'title')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('tasks', sa.Column('title', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.add_column('tasks', sa.Column('is_enabled', sa.BOOLEAN(), autoincrement=False, nullable=False))
    op.add_column('tasks', sa.Column('last_run', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
    op.add_column('tasks', sa.Column('next_run', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
    op.add_column('tasks', sa.Column('prompt', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.add_column('tasks', sa.Column('schedule', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.drop_constraint('fk_tasks_generation', 'tasks', type_='foreignkey')
    op.drop_column('tasks', 'result')
    op.drop_column('tasks', 'status')
    op.drop_column('tasks', 'task_type')
    op.drop_column('tasks', 'generation_id')
    op.add_column('stability_tests', sa.Column('stab_temperature', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.add_column('stability_tests', sa.Column('stab_observation', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('stability_tests', sa.Column('stab_duree', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.drop_column('stability_tests', 'updated_at')
    op.drop_column('stability_tests', 'notes')
    op.drop_column('stability_tests', 'result')
    op.drop_column('stability_tests', 'test_date')
    op.drop_column('stability_tests', 'test_type')
    op.drop_constraint('uq_settings_key', 'settings', type_='unique')
    op.alter_column('settings', 'value',
               existing_type=sa.String(),
               type_=postgresql.JSON(astext_type=sa.Text()),
               existing_nullable=False)
    op.drop_column('settings', 'created_at')
    op.drop_column('settings', 'description')
    op.drop_column('settings', 'id')
    op.drop_constraint('fk_logs_task', 'logs', type_='foreignkey')
    op.drop_column('logs', 'task_id')
    op.drop_constraint('fk_generations_template', 'generations', type_='foreignkey')
    op.create_foreign_key('generations_template_id_fkey', 'generations', 'templates', ['template_id'], ['id'])
    op.drop_column('generations', 'updated_at')
    op.drop_column('generations', 'created_at')
    op.drop_column('generations', 'result')
    op.add_column('compatibility_tests', sa.Column('comp_duree', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.add_column('compatibility_tests', sa.Column('comp_temp', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.drop_column('compatibility_tests', 'updated_at')
    op.drop_column('compatibility_tests', 'notes')
    op.drop_column('compatibility_tests', 'result')
    op.drop_column('compatibility_tests', 'test_date')
    op.drop_column('compatibility_tests', 'test_type')
    # ### end Alembic commands ###
