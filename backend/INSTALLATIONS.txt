# DIP-easy - Liste des Installations

## 1. Dépendances Python (requirements.txt)
- fastapi==0.104.1 : Framework web moderne et rapide
- uvicorn==0.24.0 : Serveur ASGI pour FastAPI
- sqlalchemy==2.0.23 : ORM pour la base de données
- alembic==1.12.1 : Système de migration de base de données
- psycopg2-binary==2.9.9 : Driver PostgreSQL
- python-jose[cryptography]==3.3.0 : Gestion des JWT
- passlib[bcrypt]==1.7.4 : Hachage des mots de passe
- python-multipart==0.0.6 : Gestion des formulaires
- pydantic==1.10.13 : Validation des données
- python-dotenv==1.0.0 : Gestion des variables d'environnement
- pytest==7.4.3 : Tests unitaires
- httpx==0.25.1 : Client HTTP pour les tests

## 2. Structure du Projet
- /backend
  - /app
    - /core : Configuration et utilitaires
    - /models : Modèles SQLAlchemy
    - /schemas : Schémas Pydantic
    - /api : Routes API
    - /db : Configuration base de données
  - /migrations : Migrations Alembic
  - /tests : Tests unitaires et d'intégration

## 3. Base de Données
- PostgreSQL
- Tables créées :
  - users (id, email, hashed_password, role, two_factor_enabled, is_active, created_at, updated_at)

## 4. Outils de Développement
- Alembic pour les migrations
- Pytest pour les tests
- Python-dotenv pour la configuration

## 5. Sécurité
- JWT pour l'authentification
- Bcrypt pour le hachage des mots de passe
- 2FA supporté
- CORS configuré pour le développement

## 6. API Endpoints
- /api/v1/auth/signup : Création d'utilisateur
- /api/v1/auth/token : Connexion et obtention du token
- /api/v1/auth/me : Informations de l'utilisateur connecté

## 7. Tests
- Configuration de la base de données de test (SQLite)
- Tests d'authentification :
  - Création d'utilisateur
  - Connexion
  - Vérification des tokens
  - Gestion des erreurs

## 8. Prochaines Étapes
- Configuration du frontend React
- Implémentation des composants d'authentification
- Mise en place du state management
- Intégration avec l'API 